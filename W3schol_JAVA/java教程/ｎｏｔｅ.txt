

java教程

Java 开发环境配置


Java 基础语法
由 haiguiking 创建，Loen 最后一次修改 2015-09-13
Java 基础语法
一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念


基本语法

１．大小写敏感
２．类名　对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词首字母应该大写，
３．方法名　所有方法名都应该小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写
４．源文件名　　源文件名必须与类名相同。
５．　主方法入口：所有的Java程序由public static void main(String args[])方法开始执行

java标识符

java所有的组成部分都需要名字。类名，变量名以及方法名都被称为标识符。

java修饰符

java可以使用修饰符来修饰类中的方法和属性。主要有两类修饰符

１．访问控制修饰符：default,public,protected,private
2.非访问控制修饰符：final,abstract,static,synchronized,volatile


java变量

java中主要有几种类型的变量：

１．局部变量
２．类变量(静态变量)
３．　成员变量(非静态变量)


java数组

数组是存储在堆上的对象，可保存这多个同类型变量。

java枚举

枚举限制变量只能是预先设定好的值。使用枚举可以减少代码的bug

注意，枚举可以单独声明或声明在类里面。方法，变量，构造函数也可以在枚举中定义

Java注释
类似于C/C++，Java也支持单行以及多行注释。注释中的字符将被Java编译器忽略。

Java 空行
空白行，或者有注释的的行，Java编译器都会忽略掉。


继承

在java中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性和方法，那么你可以将新创建的类继承该类

利用继承的方法，可以重用已经存在类的方法和属性，而不用重写这些代码。被继承的类成为超类(super class)，派生类称为子类(subclass)

接口

在java中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色

接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类

Java 对象和类

对象：对象是类的一个实例，有状态额行为
类：类是一个模板，它描述一类对象的行为和状态

java中的对象

在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成

java中的类

类可以看成是创建java对象的模板

public class Dog{
    String bread;
    int age;
    String color;
    void barking(){
    }
    
    void hungry(){
    }

    void sleeping(){
    }
}


一个类可以包含以下类型变量：

１．局部变量：在方法，构造方法或语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量会自动销毁
２．成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法，构造方法和特定类的语句块访问。
３．类变量：类变量也声明在类中，方法体之外，但必须声明为static类型

一个类可以拥有多个方法

构造方法

每个类都有构造方法。如果没有显式地为类定义构造方法，java编译器将会为该类提供一个默认构造方法
在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。

创建对象

对象是根据类创建的。在java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：
１．声明：声明一个对象，包括对象名称和对象类型
２．实例化：使用关键字new来创建一个对象
３．初始化：使用new创建对象时，会调用构造方法初始化对象

访问实例变量和方法
通过已创建的对象来访问成员变量和成员方法

/* 实例化对象 */
ObjectReference = new Constructor();
/* 访问其中的变量 */
ObjectReference.variableName;
/* 访问类中的方法 */
ObjectReference.MethodName();


实例

通过实例展示如何访问实例变量和调用成员方法

源文件声明规则


当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则

１．一个源文件中只能有有一个public类
２．一个源文件可以有多个非public类
３．源文件的名称应该和public类的类名保持一致
４．如果一个类定义在某个包中，那么package语句应该在源文件的首行
５．如果源文件包含import语句，那么应该在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面
６．import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明


类有若干访问级别，并且类也分不同的类型：抽象类和final类等。
除了上面提到的几种类型，java还有一些特殊的类：如内部类，匿名类


java包

包主要用来对类和接口进行分类。当开发java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类

import语句

在java中，如果给出一个完整的限定名，包括包名，类名，那么java编译器就可以很容易地定位到源代码或类。

import语句就是用来提供一个合理的路径，使得编译器可以找到某个类

例如，下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类

import java.io.*;


Employee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。


程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。
下面给出EmployeeTest类，该类实例化2个Employee类的实例，并调用方法设置变量的值。

将下面的代码保存在EmployeeTest.java文件中。

Java 基本数据类型

java基本数据类型

变量就是申请内存来存储值。当创建变量的是时候，需要在内存中申请空间。
内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来存储该类型数据
因此，通过定义不同类型的变量，可以在内存中存储整数，小数或字符。

java的两大数据类型

１．内置数据类型
２．引用数据类型

内置数据类型
Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。

实例
对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：

实际上，JAVA中还存在另外一种基本类型void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。

引用类型

１．引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的
类型。变量一旦声明后，类型就能被改版了
２．对象，数组都是引用数据类型
３．所有引用类型的默认值都是null
4.一个引用变量可以用来引用与任何与之兼容的类型

java常量
常量就是一个固定值。它们不需要计算，直接代表相应的值

常量指不能改变的量。在java中用final标志，声明方法和变量类似


虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量
字面量可以赋给任何内置类型的变量

Java 变量类型

在java语言中，所有的变量在使用前必须声明。
type identifier [ = value][, identifier [= value] ...] ;

type为java数据类型，identifier是变量名。可以使用逗号隔开来声明
多个同类型变量


java语言支持的变量类型有：

局部变量
实例变量
类变量


java局部变量

１．局部变量声明在方法，构造方法或语句块中
２．局部变量在方法，构造方法，或者语句块被执行的时候创建，
当它们执行完成后，变量将会被销毁；
３．访问修饰符不能用于局部变量
４．局部变量只能在声明它的方法，构造方法或语句块中可见
５．局部变量是栈上分配的
６．局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用


实例变量

实例变量声明在一个类中，但在方法，构造方法和语句块之外
当一个对象被实例化之后，每个实例变量的值就跟着确定
实例变量在对象创建的时候创建，在对象被销毁的时候销毁
实例变量的值应该至少被一个方法，构造方法或语句块引用，使得外部能够通过这些方式获取实例变量信息
实例变量可以声明在使用前或使用后
访问修饰符可以修饰实例变量
实例变量对于类中的方法，构造方法或语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使
实例变量对子类可见
实例变量具有默认值。数值型变量的默认值是０，布尔型变量的默认值是false,引用类型变量的默认值是null
变量的值可以在声明时指定，也可以在构造方法中指定
实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名

类变量（静态变量）

类变量也称为静态变量，在类中以static关键字声明，但必须在方法，构造方法和语句块之外
无论一个类创建了多少个对象，类只拥有类变量的一分拷贝
静态变量除了被声明为常量外很少使用。常量是值声明为public/private,final,static类型的变量。
常量初始化后不可改变
静态变量存储在静态存储区。经常被声明为常量，很少单独使用static声明变量
静态变量在程序开始时创建，在程序结束时销毁
与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型
默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。
静态变量可以通过：ClassName.VariableName的方式访问。
类变量被声明为public static final类型时，类变量名称必须使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。

java修饰符，有两类
访问修饰符
非访问修饰符

修饰符用来定义类，方法或变量，通常放在语句的最前端

访问控制修饰符

java中，可以使用访问控制符来保护对类，变量，方法和构造方法的访问。java支持４种不同的访问权限
１．默认的，也称为default,在同一包内可见，不使用任何修饰符
２．私有的，以private修饰符指定，在同一类内可见
３．共有的，以public修饰符指定，对所有类可见
４．受保护的，以protected修饰符指定，对同一包内的类和所有子类可见


默认访问修饰符－－－－不使用任何关键字

使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。
接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public


私有访问修饰符--private

私有访问修饰符是最严格的访问级别，所以被声明为private的方法，变量和构造方法只能被所属类访问，并且类和接口不能声明为private

声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问
private访问修饰付的使用主要用来隐藏

实例中，Logger类中的format变量为私有变量，所以其他类不能直接得到和设置该变量的值。
为了使其他类能够操作该变量，定义了两个public方法：getFormat(返回format的值)和
setFormat(String)(设置format的值)


共有访问修饰符---public

被声明为public的类，方法，构造方法和接口能够被任何其他类访问


如果几个相互访问的public类分布在不同的包中，则需要导入相应的public类所在的包。
由于类的继承性，类所有的共有方法和变量都能被其子类继承

public static void main(String[] arguments){
}


java程序的main()方法设置成共有的，否则，java解释器将不能运行该类

首保护的访问修饰符－－－protected

被声明为protected的变量，方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。

protected访问修饰符不修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected.

子类能访问protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量


class AudioPlayer {
    protected boolean openSpeaker(Speaker sp) {
}
}


class StreamingAudioPlay{
    boolean openSpeaker(Speaker sp){
}
}


如果把openSpeaker()方法声明为private,那么除了AudioPlayer之外的类将不能访问该方法。如果把
openSpeaker()声明为public,那么所有的类都能够访问该类。
如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected


访问控制和继承


1.父类中声明为public的方法在子类中也必须为public
2.父类中声明为protected的方法在子类中要么声明为protected，要么声明为public,不能声明为private
3.父类中默认修饰符符声明的方法，能够在子类中声明为private
4.父类中声明为private的方法，不能够被继承


非访问修饰符

为了实现一些其他的功能，java提供了许多非访问修饰符
static修饰符，用来创建类方法和类变量
final修饰符，用来修饰符类，方法和变量，final修饰的类不能够被继承，
修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。
abstract修饰符，用来创建抽象类和抽象方法
synchronized和volatile修饰符，主要用于线程的编程

static修饰符

１．静态变量

static关键字用来声明独立于对象的静态变量，无论一个雷实例化多少对象，他的静态变量只有一份拷贝。
静态变量也称为类变量。局部变量不能被声明为static变量


２．　静态方法

static关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。
静态方法从参数列表得到数据，然后计算这些数据

public class InstanceCounter{
    private static int numInstances = 0;
    protected static int getCount() {
        return numInstances;
    }
    
    private static void addInstance(){
        numInstances++;
    }
    
    InstanceCounter(){
        InstanceCounter.addInstance();
    }

    public static void main(String[] arguments){
    
        System.out.println("Starting with " +
        InstanceCounter.getCount() + " instances");
        for (int i = 0; i< 500; ++i) { new InstanceCounter();   }
System.out.println("Created" + InstanceCounter.getCount() + "instances");
}}




final修饰符

final变量：

final变量能被显式地初始化并且只能初始化一次。被声明为final的对象的引用不能指向不同的对象。
但是final对象里的数据可以被改变。final对象的引用不能改变，但是里面的值可以改变

final修饰符通常和satic修饰符一起使用来创建类变量


final方法

类中的Final方法可以被子类继承，但是不能被子类修改

声明final方法的主要目的是防止该方法的内容被修改


public class Test{
    public final void changeName(){
}   
}


final类

final类不能被继承，没有类能够继承final类的任何特性

public final class Test{
}


abstract修饰符

抽象类

抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充
一个类不能同时被abstract和final修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，
否则将出现编译错误

抽象类可以包含抽象方法和非抽象方法


abstract class Caravan{
    private double price;
    private String model;
    private String year;
    public abstract void goFast();
    public abstract void changeColor();
}



抽象方法

抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。
抽象方法不能被声明为final和static

任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类
如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象放阿飞

抽象方法的声明以分号结尾，例如: public abastract sampe();


public abstract class SuperClass{
    abstract void m();
}


class SubClass extends SuperClass{
    void m(){
    }
}


synchronized修饰符

synchronized关键字声明的方法同一时间只能被一个线程访问。synchronized修饰符可以应用于四个访问修饰符


transient修饰符

序列化的对象包含在被transient修饰的实例变量时，java虚拟机(JVM)跳过该特定的变量
该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型


public transient int limit = 55;
public int b;


volatile修饰符

volattile修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。而且，
当成员变量发生变化时，强迫线程将变化回写到共享内存。
这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。一个volatile对象引用可能是null


public class MyRunnable implements Runnable
{
    private volatile boolean activate;
    public void run()
    {   
        activate = true;
        while (activate){
    }
}
    public void stop()
    {
        activate = false'
    }

)


Java 运算符

java循环结构　-for,while,do...while

Java 分支结构 - if…else/switch

switch语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支

Java Number类
Java Character类

字符串的长度
length

连接字符串  .concat()

创建格式化字符串

printf(),format()

Java StringBuffer和StringBuilder类

java数组


