

java教程

Java 开发环境配置


Java 基础语法
由 haiguiking 创建，Loen 最后一次修改 2015-09-13
Java 基础语法
一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念


基本语法

１．大小写敏感
２．类名　对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词首字母应该大写，
３．方法名　所有方法名都应该小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写
４．源文件名　　源文件名必须与类名相同。
５．　主方法入口：所有的Java程序由public static void main(String args[])方法开始执行

java标识符

java所有的组成部分都需要名字。类名，变量名以及方法名都被称为标识符。

java修饰符

java可以使用修饰符来修饰类中的方法和属性。主要有两类修饰符

１．访问控制修饰符：default,public,protected,private
2.非访问控制修饰符：final,abstract,static,synchronized,volatile


java变量

java中主要有几种类型的变量：

１．局部变量
２．类变量(静态变量)
３．　成员变量(非静态变量)


java数组

数组是存储在堆上的对象，可保存这多个同类型变量。

java枚举

枚举限制变量只能是预先设定好的值。使用枚举可以减少代码的bug

注意，枚举可以单独声明或声明在类里面。方法，变量，构造函数也可以在枚举中定义

Java注释
类似于C/C++，Java也支持单行以及多行注释。注释中的字符将被Java编译器忽略。

Java 空行
空白行，或者有注释的的行，Java编译器都会忽略掉。


继承

在java中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性和方法，那么你可以将新创建的类继承该类

利用继承的方法，可以重用已经存在类的方法和属性，而不用重写这些代码。被继承的类成为超类(super class)，派生类称为子类(subclass)

接口

在java中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色

接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类

Java 对象和类

对象：对象是类的一个实例，有状态额行为
类：类是一个模板，它描述一类对象的行为和状态

java中的对象

在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成

java中的类

类可以看成是创建java对象的模板

public class Dog{
    String bread;
    int age;
    String color;
    void barking(){
    }
    
    void hungry(){
    }

    void sleeping(){
    }
}


一个类可以包含以下类型变量：

１．局部变量：在方法，构造方法或语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量会自动销毁
２．成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法，构造方法和特定类的语句块访问。
３．类变量：类变量也声明在类中，方法体之外，但必须声明为static类型

一个类可以拥有多个方法

构造方法

每个类都有构造方法。如果没有显式地为类定义构造方法，java编译器将会为该类提供一个默认构造方法
在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。

创建对象

对象是根据类创建的。在java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：
１．声明：声明一个对象，包括对象名称和对象类型
２．实例化：使用关键字new来创建一个对象
３．初始化：使用new创建对象时，会调用构造方法初始化对象

访问实例变量和方法
通过已创建的对象来访问成员变量和成员方法

/* 实例化对象 */
ObjectReference = new Constructor();
/* 访问其中的变量 */
ObjectReference.variableName;
/* 访问类中的方法 */
ObjectReference.MethodName();


实例

通过实例展示如何访问实例变量和调用成员方法

源文件声明规则


当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则

１．一个源文件中只能有有一个public类
２．一个源文件可以有多个非public类
３．源文件的名称应该和public类的类名保持一致
４．如果一个类定义在某个包中，那么package语句应该在源文件的首行
５．如果源文件包含import语句，那么应该在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面
６．import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明


类有若干访问级别，并且类也分不同的类型：抽象类和final类等。
除了上面提到的几种类型，java还有一些特殊的类：如内部类，匿名类


java包

包主要用来对类和接口进行分类。当开发java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类

import语句

在java中，如果给出一个完整的限定名，包括包名，类名，那么java编译器就可以很容易地定位到源代码或类。

import语句就是用来提供一个合理的路径，使得编译器可以找到某个类

例如，下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类

import java.io.*;


Employee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。


程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。
下面给出EmployeeTest类，该类实例化2个Employee类的实例，并调用方法设置变量的值。

将下面的代码保存在EmployeeTest.java文件中。

Java 基本数据类型

java基本数据类型

变量就是申请内存来存储值。当创建变量的是时候，需要在内存中申请空间。
内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来存储该类型数据
因此，通过定义不同类型的变量，可以在内存中存储整数，小数或字符。

java的两大数据类型

１．内置数据类型
２．引用数据类型

内置数据类型
Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。

实例
对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：

实际上，JAVA中还存在另外一种基本类型void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。

引用类型

１．引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的
类型。变量一旦声明后，类型就能被改版了
２．对象，数组都是引用数据类型
３．所有引用类型的默认值都是null
4.一个引用变量可以用来引用与任何与之兼容的类型

java常量
常量就是一个固定值。它们不需要计算，直接代表相应的值

常量指不能改变的量。在java中用final标志，声明方法和变量类似


虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量
字面量可以赋给任何内置类型的变量

Java 变量类型

在java语言中，所有的变量在使用前必须声明。
type identifier [ = value][, identifier [= value] ...] ;

type为java数据类型，identifier是变量名。可以使用逗号隔开来声明
多个同类型变量


java语言支持的变量类型有：

局部变量
实例变量
类变量


java局部变量

１．局部变量声明在方法，构造方法或语句块中
２．局部变量在方法，构造方法，或者语句块被执行的时候创建，
当它们执行完成后，变量将会被销毁；
３．访问修饰符不能用于局部变量
４．局部变量只能在声明它的方法，构造方法或语句块中可见
５．局部变量是栈上分配的
６．局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用


实例变量

实例变量声明在一个类中，但在方法，构造方法和语句块之外
当一个对象被实例化之后，每个实例变量的值就跟着确定
实例变量在对象创建的时候创建，在对象被销毁的时候销毁
实例变量的值应该至少被一个方法，构造方法或语句块引用，使得外部能够通过这些方式获取实例变量信息
实例变量可以声明在使用前或使用后
访问修饰符可以修饰实例变量
实例变量对于类中的方法，构造方法或语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使
实例变量对子类可见
实例变量具有默认值。数值型变量的默认值是０，布尔型变量的默认值是false,引用类型变量的默认值是null
变量的值可以在声明时指定，也可以在构造方法中指定
实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名

类变量（静态变量）

类变量也称为静态变量，在类中以static关键字声明，但必须在方法，构造方法和语句块之外
无论一个类创建了多少个对象，类只拥有类变量的一分拷贝
静态变量除了被声明为常量外很少使用。常量是值声明为public/private,final,static类型的变量。
常量初始化后不可改变
静态变量存储在静态存储区。经常被声明为常量，很少单独使用static声明变量
静态变量在程序开始时创建，在程序结束时销毁
与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型
默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。
静态变量可以通过：ClassName.VariableName的方式访问。
类变量被声明为public static final类型时，类变量名称必须使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。

java修饰符，有两类
访问修饰符
非访问修饰符

修饰符用来定义类，方法或变量，通常放在语句的最前端

访问控制修饰符

java中，可以使用访问控制符来保护对类，变量，方法和构造方法的访问。java支持４种不同的访问权限
１．默认的，也称为default,在同一包内可见，不使用任何修饰符
２．私有的，以private修饰符指定，在同一类内可见
３．共有的，以public修饰符指定，对所有类可见
４．受保护的，以protected修饰符指定，对同一包内的类和所有子类可见


默认访问修饰符－－－－不使用任何关键字

使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。
接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public


私有访问修饰符--private

私有访问修饰符是最严格的访问级别，所以被声明为private的方法，变量和构造方法只能被所属类访问，并且类和接口不能声明为private

声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问
private访问修饰付的使用主要用来隐藏

实例中，Logger类中的format变量为私有变量，所以其他类不能直接得到和设置该变量的值。
为了使其他类能够操作该变量，定义了两个public方法：getFormat(返回format的值)和
setFormat(String)(设置format的值)


共有访问修饰符---public

被声明为public的类，方法，构造方法和接口能够被任何其他类访问


如果几个相互访问的public类分布在不同的包中，则需要导入相应的public类所在的包。
由于类的继承性，类所有的共有方法和变量都能被其子类继承

public static void main(String[] arguments){
}


java程序的main()方法设置成共有的，否则，java解释器将不能运行该类

首保护的访问修饰符－－－protected

被声明为protected的变量，方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。

protected访问修饰符不修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected.

子类能访问protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量


class AudioPlayer {
    protected boolean openSpeaker(Speaker sp) {
}
}


class StreamingAudioPlay{
    boolean openSpeaker(Speaker sp){
}
}


如果把openSpeaker()方法声明为private,那么除了AudioPlayer之外的类将不能访问该方法。如果把
openSpeaker()声明为public,那么所有的类都能够访问该类。
如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected


访问控制和继承


1.父类中声明为public的方法在子类中也必须为public
2.父类中声明为protected的方法在子类中要么声明为protected，要么声明为public,不能声明为private
3.父类中默认修饰符符声明的方法，能够在子类中声明为private
4.父类中声明为private的方法，不能够被继承


非访问修饰符

为了实现一些其他的功能，java提供了许多非访问修饰符
static修饰符，用来创建类方法和类变量
final修饰符，用来修饰符类，方法和变量，final修饰的类不能够被继承，
修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。
abstract修饰符，用来创建抽象类和抽象方法
synchronized和volatile修饰符，主要用于线程的编程

static修饰符

１．静态变量

static关键字用来声明独立于对象的静态变量，无论一个雷实例化多少对象，他的静态变量只有一份拷贝。
静态变量也称为类变量。局部变量不能被声明为static变量


２．　静态方法

static关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。
静态方法从参数列表得到数据，然后计算这些数据

public class InstanceCounter{
    private static int numInstances = 0;
    protected static int getCount() {
        return numInstances;
    }
    
    private static void addInstance(){
        numInstances++;
    }
    
    InstanceCounter(){
        InstanceCounter.addInstance();
    }

    public static void main(String[] arguments){
    
        System.out.println("Starting with " +
        InstanceCounter.getCount() + " instances");
        for (int i = 0; i< 500; ++i) { new InstanceCounter();   }
System.out.println("Created" + InstanceCounter.getCount() + "instances");
}}




final修饰符

final变量：

final变量能被显式地初始化并且只能初始化一次。被声明为final的对象的引用不能指向不同的对象。
但是final对象里的数据可以被改变。final对象的引用不能改变，但是里面的值可以改变

final修饰符通常和satic修饰符一起使用来创建类变量


final方法

类中的Final方法可以被子类继承，但是不能被子类修改

声明final方法的主要目的是防止该方法的内容被修改


public class Test{
    public final void changeName(){
}   
}


final类

final类不能被继承，没有类能够继承final类的任何特性

public final class Test{
}


abstract修饰符

抽象类

抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充
一个类不能同时被abstract和final修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，
否则将出现编译错误

抽象类可以包含抽象方法和非抽象方法


abstract class Caravan{
    private double price;
    private String model;
    private String year;
    public abstract void goFast();
    public abstract void changeColor();
}



抽象方法

抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。
抽象方法不能被声明为final和static

任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类
如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象放阿飞

抽象方法的声明以分号结尾，例如: public abastract sampe();


public abstract class SuperClass{
    abstract void m();
}


class SubClass extends SuperClass{
    void m(){
    }
}


synchronized修饰符

synchronized关键字声明的方法同一时间只能被一个线程访问。synchronized修饰符可以应用于四个访问修饰符


transient修饰符

序列化的对象包含在被transient修饰的实例变量时，java虚拟机(JVM)跳过该特定的变量
该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型


public transient int limit = 55;
public int b;


volatile修饰符

volattile修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。而且，
当成员变量发生变化时，强迫线程将变化回写到共享内存。
这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。一个volatile对象引用可能是null


public class MyRunnable implements Runnable
{
    private volatile boolean activate;
    public void run()
    {   
        activate = true;
        while (activate){
    }
}
    public void stop()
    {
        activate = false'
    }

)


Java 运算符

java循环结构　-for,while,do...while

Java 分支结构 - if…else/switch

switch语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支

Java Number类
Java Character类

字符串的长度
length

连接字符串  .concat()

创建格式化字符串

printf(),format()

Java StringBuffer和StringBuilder类

java数组

声明数组变量

首先必须声明数组变量，才能在程序中使用数组。

dataType[] arrarRefVar

double[] myList;


创建数组

Java语言使用new操作符号来创建数组

arrayRefVar = new dataType[arraySize]

数组变量的声明，和创建数组可以用一条语句，

dataType[] arrayRefVar = new dataType[arraySize];

数组的元素是通过索引访问的。

double[] myList = new double[10];

处理数组

数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或foreach徐那话

下面展示如何创建，初始化和操作数组

foreach循环

可以在不使用下标的情况下遍历数组



数组作为函数的参数


数组可以作为参数传递给方法。

数组作为函数额返回值


Array类

java.util,Array类能方便地操作数组，它提供的所有方法都是静态的

１．给数组赋值：fill方法
２．对数组排序：sort方法，按升序
３．比较数组：equals方法比较数组中元素值是否相等
４．　查找数组元素：binarySearch方法能对排序好的数组进行二分查找法操作

java日期时间

java.util包提供了Date类来封装当前的日期和时间。Date类提供两个函数来实例化Date对象

获取当前日期时间

java中获取当前日期和时间很简单，使用Date对象的toString()方法来打印当前日期和时间

日期的比较

有３个方法

１．getTime()获取两个日期，然后比较
２．使用before(),after().,equals().返回布尔值
３．使用compareTo()方法，它是由Comparable接口定义的，Date类实现了这个接口



使用SimpleDateFormat格式化日期


SimpleDateFormat是一个一语言环境敏感
的方式来格式化和分析日期的类。
SimpleDateFormat允许你选择任何用户自定义日期
时间格式来运行

简单的DateFormat格式化编码

时间模式字符串用来指定时间格式。
在此模式中，所有的ASCII字母被保留为模式字母

使用printf格式化日期


printf方法可以轻松地格式化时间和日期。
使用两个字母格式，它以t开头以下面表格中的一个字母结尾

可以利用一个格式化字符串指出要被格式化的参数的索引

索引必须紧跟在%后面，而且必须以$结束

可以使用<标志。它表明先前被格式化的参数要被再次使用

解析字符串为时间

SimpleDateFormat类有一些附加的方法，特别是parse(),
它试图按照给定的SimpleDateFormat对象的格式化存储来解析字符串

Java休眠（sleep）
你可以让程序休眠一毫秒的时间

测量时间


Calendar类

Calendar累是一个抽象累，在实际使用时实现特定的子类的对象，
创建对象的过程对程序员来说时透明的，
只需要使用getInstance方法创建即可


创建一个代表系统当前日期的Calendar对象

Calendar c = Calendar.getInstance();

创建一个指定日期的Calendar对象

使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象
，然后再设定该对象中的年月日参数来完成


Calendar c1 = Calendar.getInstance();
c1.set(2009,6-1,12)

Calendar类对象信息的设置

Set设置


调用

public final void set(int year,int month,int date)

利用字段类型设置

如果只设置某个字段，例如日期的值，则可以使用如下set方法

puclic void set(int field,int value)


把c1对象代表的日期设置为10号，其它所有的数值会被重新计算

c1.set(Calendar.DATE,10);


把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算


c1.set(Calendar.YEAR,2008);

其他字段属性set的意义以此类推


Add设置


Calendar c1 = Calendar.getInstance();

把c1对象的日期加上10，也就是c1所表的日期的10天后的日期，其它所有的数值会被重新计算

c1.add(Calendar.DATE,10);

Calendar类对象信息的获得

Calendar c1= Calendar.getInstance();

int year = c1.get(Calendar.YEAR);
int month = c1.get(Calendar.MONTH) +1;
int date = c1.get(Calendar.DATE);
int hour = c1.get(Calendar.HOUR_OF_DAY);
int minute = c1.get(Calendar.MINUTE);
int second = c1.get(Calendar.SECOND);
int day = c1.get(Calendar.DAY_OF_WEEK);


GregorianCalendar类


JAVA正则表达式

正则表达式定义字符串的模式。正则表达式可以用来搜索，编辑或处理文本
正则表达式并不仅限于某一种语言。
java正则表达式和perl最为类似

java.util.regex包 主要包括以下三个类：


1.Pattern类
2.Matcher类
3.PatternSyntaxException

捕获组

捕获组是把多个字符当一个端度单元进行处理的方法，它通过对括号内的
字符分组来创建。

捕获组是通过从左至右计算其开括号来编号。
((A)(B(C)))
共有四个组

可以通过调用matcher对象的groupCount方法来查看表达式
有多少个分组。groupCount方法返回一个int值，
表示matcher对象当前有多个捕获组

还有一个特殊的组(组0)，它总是代表整个表达式。
该组不包括在groupCount的返回值中。


Matcher类的方法

索引方法

索引方法提供了有用的索引值，精确表明输入字符串在哪能找到匹配

public int start()
public int start(int group)
public int end()
public int end(int group)


研究方法
研究方法用来检查输入字符串病返回一个布尔值，表示是否找到该模式

public boolean lookingAt()
public boolean find()
public boolean find(int start)
public boolean matches()

替换方法

替换方法是替换输入字符穿里文本的方法

public Matcher appendReplacement()
public StringBuffer appendTail()
public String replaceAll()
public String replaceFirst()
public static String quoteReplacement()



matches和lookingAt方法

matches和lookingAt方法都用来尝试匹配一个输入序列模式，
它们的不同是matcher要求整个序列都匹配，
而lookingAt不要求

这两个方法经常输入字符串的使用、、


replaceFirst和replaceAll方法

都是用来替换匹配正则表达式的文本。不同的是，
replaceFirst替换首次匹配，replaceAll替换所有匹配

appendReplacement和appendTail方法
用于文本替换

PatternSyntaxException类的方法
PatternSyntaxException是一个非强制异常类，
它指示一个正则表达式模式中额语法错误。



java方法

println()是一个方法（Method），而System是系统类(Class),
out是标准输出对象(Object).这句话的用法是调用
系统累System中的标准输出对象out中的方法println()


java方法是语句的集合，它们在一起执行一个功能

方法是解决一类问题的步骤的有序组合
方法包含于类或对象中
方法在程序中被创建，在其他地方被引用

方法的定义

一般情况下，定义一个方法包含以下语法：

修饰符  返回值类型 方法名 (参数类型 参数名){
  ...
  方法体
return 返回值；
 }

方法包含一个方法头和一个方法体

public static int age(int birthday){...}

static float interest(float principal,int year){...}


在一些其他语言中只过程或函数。一个返回非void类型返回值的方法称为函数；
一个返回void类型返回值的方法叫做过程。

public static int max(int num1,int num2){
    int result;
    if (num1 > num2)
        result = num1;
    else
        result = num2;

return result;

}


方法调用

java支持两个调用方法的方式，根据方法是否返回来选择

当程序调用一个方法时，程序的控制权交给了被调用的方法。
当被调用方法的返回语句执行或到达方法体闭括号时候
交还控制权给程序

当方法返回一个值的时候，方法调用通常被当做一个值


int larger = max(30,40);

如果方法返回值是void，方法调用一定是一条语句。
System.out.println("E");

Main方法是被JVM调用的

void关键字

通过值传递参数

调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供
public static void nPrintln(String message,int n){
 for (int i=0;i<n;i++) System.out.println(message);
}

一个方法，用于交换两个变量

方法的重载

变量作用域

变量的范围是程序中该变量可以被引用的部分
方法内定义的变量被称为局部变量
局部变量的作用范围从声明开始，直到包含它的块结束

局部变量必须声明才可以使用
方法的参数范围涵盖整个方法。参数实际上是一个局部变量
for循环的初始化部分声明的变量，其作用范围在整个循环
但循环体内声明的变量其适用范围是从它声明到循环体结束。

命令行参数的使用

命令行参数是在执行程序时候紧跟在程序名字后面的消息


构造方法

当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，
但构造方法没有返回值

通常会使用构造方法给一个类的实例变量赋值，或执行其他必要的步骤
来创建一个完整的对象

所有的类都有构造方法，因为java自动提供了一个默认构造方法，
它把所有成员初始化为0
一旦定义了自己的构造方法，默认构造方法就会失效


class MyClass{
    int x;
    
    MyClass(){
    x= 10;
}

大多数时候需要一个有参数的构造方法


可变参数

在方法声明中，在指定参数类型后加一个省略号(...)
一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。
任何普通的参数必须在它之前声明

finalize()方法


java允许定义这样的方法，它在对象被垃圾收集器析构（回收）之前
调用，这个方法叫做finalize(),它用来清楚回收对象

例如，可以使用finalize()来确保一个对象打开的文件被关闭了

在finalize()方法里，你必须指定在对象销毁时候要执行的操作

protected void finalize()
{}

关键字protected是一个限定符，它确保finalize()方法不会被
该类以外的代码调用。

java的内存回收可以由JVM来自动完成


Java 流(Stream)、文件(File)和IO

java.io包几乎包含了所有操作输入，输出需要的类。所有这些流类
代表了输入源和输出目标

java.io包中的流支持很多格式，比如：基本类型，对象，本地化字符集等

一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出
流表示向一个目标写数据

java为I/O提供了强大而灵活的支持，使其更广泛地应用到文件传输和
网络变成中。

读取控制台输入

java的控制台输入由System.in完成


BufferedReader br = new BufferedReader(new InputStreamReader(System.in))


从控制台读取多字符输入
int read() throws IOException

从控制台读取字符串

从标准输入读取一个字符串需要使用BufferedReader的readLine()方法

控制台输出

读写文件

一个流被定义为一个数据序列。输入流用于源读取数据，
输出流用于向目标写数据

FileInputStream ，该流用于从文件读取数据，它的对象可以ongoi
用关键字new来创建

FileOutputStream，该累用来创建一个文件并向文件中写数据

文件和I/O

File Class（类）
FileReader Class（类）
FileWriter Class（类）

java中的目录

创建目录：

File类中有两个方法用来创建文件夹：

1.mkdir()方法创建一个文件夹
2.mkdirs()方法用来创建一个文件夹和它的所有父文件夹

读取目录

一个目录其实就是一个File对象，它包含其他文件和文件夹

java Scanner类


可以通过Scanner类来获取用户的输入


Scanner s = new Scanner(System.in);


使用next 方法

next()和nextLine()的区别

java异常处理

异常的种类：
1.用户输入了非法数据
2.要打开的文件不存在
3.网络通信时连接中断，或JVM内存溢出


1.检查行异常
2.运行时异常
3.错误


Exception类的层次


所有异常类是从java.lang.Exception类集成的子类


java内置异常类


java语言定义了一些异常类在java.lang标准包中

异常方法
捕捉异常

使用try和catch关键字可以捕获异常。try/catch代码
放在可能出现异常的地方


try{

} catch(ExceptionName e1){}


多重捕获快


try {} catch(){}catch(){}catch(){}


throws/throw关键字


finanlly关键字

注意：

1.所有异常都必须是Throwable的子类
2.如果希望写一个检查行异常类，则需要继承Exception类
3.如果想写一个运行时异常类，那么需要继承RuntimeException类

class MyException extends Excepiton{}

只继承Exception类来创建的异常类是检查性异常类

一个异常类和其他任何类一样，包含有变量和方法

通用异常

1.JVM(java虚拟机)异常：由JVM抛出的异常或错误
2.程序级异常：由程序或API程序抛出的异常






